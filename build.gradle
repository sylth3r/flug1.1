/*
 * Copyright (C) 2016 - 2018 Juergen Zimmermann, Hochschule Karlsruhe
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

//  Aufrufe
//  1) Microservice uebersetzen und starten
//        .\gradlew -t
//        .\gradlew compileKotlin
//        .\gradlew compileTestKotlin
//
//  2) Microservice als selbstausfuehrendes JAR erstellen und ausfuehren
//        .\gradlew assemble
//        java -jar build/libs/....jar --spring.profiles.active=dev
//
//  3) Tests und QS
//        .\gradlew build
//        .\gradlew test
//        .\gradlew jacocoTestReport
//        .\gradlew cleanTest
//        .\gradlew ktlintCheck detektCheck --warning-mode=all
//        .\gradlew -x test sonarqube
//        .\gradlew lintKotlin
//
//  4) Sicherheitsueberpruefung durch OWASP Dependency Check
//        .\gradlew dependencyCheckAnalyze --info
//        .\gradlew dependencyCheckUpdate --info
//
//  5) Projektreport erstellen
//        .\gradlew projectReport
//        .\gradlew dependencies
//        .\gradlew dependencies --configuration runtimeOnly
//        .\gradlew htmlDependencyReport
//
//  6) Neue Abhaengigkeiten ueberpruefen
//        .\gradlew dependencyUpdates
//        .\gradlew versions
//
//  7) Dokumentation erstellen
//        .\gradlew dokka
//
//  8)Abhaengigkeitsgraph
//        .\gradlew generateDependencyGraph
//
//  9) Report ueber die Lizenzen der eingesetzten Fremdsoftware
//        .\gradlew generateLicenseReport
//
//  10) Entwicklerhandbuch in "Software Engineering" erstellen
//        .\gradlew asciidoctor
//
//  11) Daemon abfragen und stoppen
//        .\gradlew --status
//        .\gradlew --stop
//
//  12) Verfuegbare Tasks auflisten
//        .\gradlew tasks
//
//  13) Properties auflisten
//        .\gradlew properties
//        .\gradlew dependencyManagementProperties
//
//  14) Initialisierung des Gradle Wrappers in der richtigen Version
//      (dazu ist ggf. eine Internetverbindung erforderlich)
//        gradle wrapper --gradle-version 4.6 --distribution-type=all

buildscript {
    ext {
        kotlinVersion = '1.2.40-eap-16'
        //dokkaVersion= '0.9.16'
        //springBootVersion = '2.0.0.RELEASE'
        ktlintVersion = '0.20.0'
        asciidoctorjPdfVersion = '1.5.0-alpha.16'
    }

    repositories {
        maven { url 'http://dl.bintray.com/kotlin/kotlin-eap' }
        maven { url 'http://repo.spring.io/libs-milestone' }
        //maven { url 'http://repo.spring.io/milestone' }
        maven { url 'https://plugins.gradle.org/m2' }
        maven { url 'http://repo.spring.io/plugins-release' }
        jcenter()
        //mavenCentral()

        //maven { url 'https://oss.jfrog.org/artifactory/oss-snapshot-local' }
        //maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    }
    dependencies {
        classpath(
                "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion",
                //"org.jetbrains.dokka:dokka-gradle-plugin:$dokkaVersion",
                // fuer Spring Beans und Mockito
                "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion",
                // fuer @ConfigurationProperties mit "data class"
                "org.jetbrains.kotlin:kotlin-noarg:$kotlinVersion",
                //"org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion",
                //"io.gitlab.arturbosch.detekt:detekt:...",
                "org.asciidoctor:asciidoctorj-pdf:$asciidoctorjPdfVersion")
    }

    configurations.classpath {
        resolutionStrategy { force "com.github.shyiko:ktlint:$ktlintVersion" }
    }
}

plugins {
    id 'idea'

    id 'org.springframework.boot' version '2.0.0.RELEASE'

    id 'jacoco'

    //id 'io.qameta.allure' version '2.6'

    id 'org.gradle.kotlin.ktlint-convention' version '0.1.4'

    // https://github.com/JLLeitschuh/ktlint-gradle
    // https://github.com/shyiko/ktlint
    id 'org.jlleitschuh.gradle.ktlint' version '3.2.0'

    // https://github.com/jeremymailen/kotlinter-gradle
    id 'org.jmailen.kotlinter' version '1.10.0'

    // https://github.com/arturbosch/detekt
    id 'io.gitlab.arturbosch.detekt' version '1.0.0.RC6-4'

    // http://redirect.sonarsource.com/doc/gradle.html
    id 'org.sonarqube' version '2.6.2'

    id 'org.jetbrains.dokka' version '0.9.16'

    id 'com.fizzpod.sweeney' version '3.0.0'

    id 'org.owasp.dependencycheck' version '3.1.1'

    //'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.15'
    id 'org.asciidoctor.convert' version '1.5.7'

    // https://github.com/vanniktech/gradle-dependency-graph-generator-plugin
    id 'com.vanniktech.dependency.graph.generator' version '0.3.0'

    id 'project-report'

    // https://github.com/ben-manes/gradle-versions-plugin
    id 'com.github.ben-manes.versions' version '0.17.0'

    // https://plugins.gradle.org/plugin/com.github.nwillc.vplugin
    id 'com.github.nwillc.vplugin' version '2.1.1'

    // https://github.com/intergamma/gradle-zap
    id 'net.intergamma.gradle.gradle-zap-plugin' version '0.9.6'

    // https://github.com/jk1/Gradle-License-Report
    id 'com.github.jk1.dependency-license-report' version '0.6'

    // https://github.com/jaredsburrows/gradle-license-plugin
    //id 'com.jaredsburrows.license' version '0.8.41'
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-allopen'
apply plugin: 'kotlin-noarg'
//apply plugin: 'org.jetbrains.dokka'
//apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
//apply plugin: 'io.qameta.allure'

group = 'de.hska'
version = '1.0'

defaultTasks 'bootRun'

// -------------------------------------------------------------------------------------------
// Properties aus BOM-Dateien ueberschreiben
// siehe org.springframework.boot:spring-boot-dependencies
//    https://github.com/spring-projects/spring-boot/blob/master/spring-boot-dependencies/pom.xml
// siehe org.springframework.cloud:spring-cloud-dependencies
//    https://github.com/spring-cloud/spring-cloud-release/blob/master/spring-cloud-dependencies/pom.xml
// siehe org.springframework.cloud:spring-cloud-build-dependencies
//    https://github.com/spring-cloud/spring-cloud-build/blob/master/spring-cloud-build-dependencies/pom.xml
// siehe org.springframework.cloud:spring-cloud-netflix-dependencies
//    https://github.com/spring-cloud/spring-cloud-netflix/blob/master/spring-cloud-netflix-dependencies/pom.xml
// siehe org.springframework.cloud:spring-cloud-build
//    https://github.com/spring-cloud/spring-cloud-build/blob/master/pom.xml
// -------------------------------------------------------------------------------------------
//https://www.eclipse.org/aspectj/doc/released/README-190.html
ext['aspectj.version'] = '1.9.0.RC4'
ext['hazelcast.version'] = '3.10-BETA-2'
ext['hibernate-validator.version'] = '6.0.8.Final'
ext['jackson.version'] = '2.9.4'
//ext['javax-mail.version'] = '1.6.1'
//ext['javax-validation.version'] = '2.0.1.Final'
//ext['jetty.version'] = '9.4.8.v20171121'
ext['junit-jupiter.version'] = '5.1.0'
ext['junit-platform.version'] = '1.1.0'
ext['kotlin.version'] = '1.2.40-eap-16'
//ext['logback.version'] = '1.2.3'
ext['mockito.version'] = '2.17.0'
//ext['mongo-driver-reactivestreams.version'] = '1.7.1'
//ext['mongodb.version'] = '3.6.3'
//ext['reactor-bom.version'] = 'Bismuth-SR7'
//ext['slf4j.version'] = '1.7.25'
//ext['spring.version'] = '5.0.4.RELEASE'
ext['spring-data-releasetrain.version'] = 'Lovelace-M1'
//ext['spring-kafka.version'] = '2.1.4.RELEASE'
//ext['spring-security.version'] = '5.0.3.RELEASE'
//ext['spring-security-jwt.version'] = '1.0.9.RELEASE'
//ext['spring-security-oauth.version'] = '5.3.0.RELEASE'
// spring-security-jwt-jose -> spring-security-oauth2-jose
ext['tomcat.version'] = '9.0.6'
ext['undertow.version'] = '2.0.3.Final'

ext['spring-cloud.version'] = 'Finchley.M9'
//ext['spring-cloud-config.version'] = '2.0.0.M9'
//ext['spring-cloud-netflix.version'] = '2.0.0.M8'
//ext['spring-boot.version'] = '2.0.0.RELEASE'
//ext['eureka.version'] = '1.8.7'
ext['feign.version'] = '9.6.0'
//ext['hystrix.version'] = '1.5.12'
//ext['ribbon.version'] = '2.2.5'

ext {
    // Spring IO Platform: Spring Framework, Spring Boot, Spring Data, Spring Security, Spring Security OAuth
    //springPlatformBomVersion = 'Brussels-SR5'
    jacksonModuleKotlinVersion = '2.9.4.1'
    jaxbRuntimeVersion = '2.3.0'
    jsr311ApiVersion = '1.1.1'
    activationVersion = '1.1.1'
    paranamerVersion = '2.8'

    allureVersion = '2.6'
    allureJunit5Version = '2.6.0'
    jacocoVersion = '0.8.1'
    intellijVersion = '2018.1'

    asciidoctorjVersion = '1.6.0-alpha.6'
    antJunitVersion = '1.10.2'

    owaspAutoupdate = false

    plantumlVersion = '1.2018.2'
}

configurations {
    plantuml

    depCheck

    // Spring Webflux wird benutzt, und nicht Spring WebMVC
    implementation.exclude module: 'spring-webmvc'
    // Tomcat statt Netty
    implementation.exclude module: 'spring-boot-starter-reactor-netty'

    // spring-test mit MockMvc und auch JUnit 4 benoetigt hamcrest-core
    testImplementation.exclude module: 'junit'
    testImplementation.exclude module: 'hamcrest-core'
    testImplementation.exclude module: 'hamcrest-library'
    testImplementation.exclude module: 'assertj-core'
    testImplementation.exclude module: 'json-path'
    testImplementation.exclude module: 'jsonassert'
    // Mit Tomcat 9 bleiben die Tests haengen
    testImplementation.exclude module: 'spring-boot-starter-tomcat'
}

repositories {
    maven { url 'http://dl.bintray.com/kotlin/kotlin-eap' }

    // https://github.com/spring-projects/spring-framework/wiki/Spring-repository-FAQ
    maven { url 'http://repo.spring.io/libs-milestone' }
    maven { url 'http://repo.spring.io/release' }
    //maven { url 'http://repo.spring.io/libs-snapshot' }

    jcenter()
    //mavenCentral()

    // Snapshots von JaCoCo
    //maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

dependencyManagement {
    //https://github.com/spring-cloud/spring-cloud-release/blob/master/docs/src/main/asciidoc/spring-cloud-starters.adoc#using-spring-cloud-dependencies-with-spring-io-platform
    //imports { mavenBom "io.projectreactor:reactor-bom:${project.ext['reactor-bom.version']}" }
    imports { mavenBom "org.springframework.data:spring-data-releasetrain:${project.ext['spring-data-releasetrain.version']}" }
    //imports { mavenBom "org.springframework.boot:spring-boot-dependencies:${project.ext['spring-boot.version']}" }
    //imports { mavenBom "org.springframework.security:spring-security-bom:${project.ext['spring-security.version']}" }
    imports { mavenBom "org.springframework.cloud:spring-cloud-dependencies:${project.ext['spring-cloud.version']}" }
}

dependencies {
    // https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-configuration-metadata.adoc#generating-your-own-metadata-by-using-the-annotation-processor
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    implementation(
            'org.jetbrains.kotlin:kotlin-stdlib-jdk8',
            'org.jetbrains.kotlin:kotlin-reflect',

            // fuer YML-Konfigurationsdateien
            'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml',
            // fuer Validierung von Methodenargumenten
            "com.thoughtworks.paranamer:paranamer:$paranamerVersion",
            // fuer File-Upload mit WebFlux (statt Servlets)
            'org.synchronoss.cloud:nio-multipart-parser',
            // fuer Caching
            'com.hazelcast:hazelcast-spring',
            // fuer Konfiguration von CORS
            "javax.ws.rs:jsr311-api:$jsr311ApiVersion",

            //'io.projectreactor:reactor-core:3.2.0.M1',
            'org.springframework.kafka:spring-kafka',
            'org.springframework.boot:spring-boot-starter-json',

            // CAVEAT: Falls spring-boot-starter-web als Dependency enthalten ist, wird Spring MVC konfiguriert,
            // damit in MVC-Anwendungen der "reactive" WebClient nutzbar ist
            // spring-boot-starter-webflux: Reactor Netty als Default "Web Engine"
            'org.springframework.boot:spring-boot-starter-webflux',
            'org.springframework.boot:spring-boot-starter-tomcat',
            //'org.springframework.boot:spring-boot-starter-undertow',
            //'org.springframework.boot:spring-boot-starter-jetty',
            'io.projectreactor.ipc:reactor-netty',

            'org.springframework.boot:spring-boot-starter-data-mongodb-reactive',
            'org.springframework.boot:spring-boot-starter-security',
            'org.springframework.boot:spring-boot-starter-mail',
            'org.springframework.boot:spring-boot-starter-aop',
            'org.springframework.boot:spring-boot-starter-cache',

            'org.springframework.cloud:spring-cloud-starter-config',
            //'org.springframework.cloud:spring-cloud-starter-consul-discovery',
            'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client',
            'org.springframework.cloud:spring-cloud-starter-netflix-hystrix',
            'org.springframework.cloud:spring-cloud-starter-openfeign')
            //'org.springframework.cloud:spring-cloud-stream',
            //'org.springframework.cloud:spring-cloud-starter-stream-kafka')
            //'org.springframework.cloud:spring-cloud-starter-oauth2'

    runtime(
            'org.springframework.boot:spring-boot-starter-actuator',
            'org.springframework.boot:spring-boot-devtools',
            "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonModuleKotlinVersion",
            // Hibernate Validator und Jersey-core (fuer Netflix Eureka)
            "javax.xml.bind:jaxb-api:$jaxbRuntimeVersion",
            "com.sun.xml.bind:jaxb-core:$jaxbRuntimeVersion",
            "com.sun.xml.bind:jaxb-impl:$jaxbRuntimeVersion"
    )

    testImplementation(
            "org.junit.jupiter:junit-jupiter-params:${project.ext['junit-jupiter.version']}",
            'org.springframework.boot:spring-boot-starter-test',
            'org.springframework.security:spring-security-test',
            "org.mockito:mockito-junit-jupiter:${project.ext['mockito.version']}")

    testRuntimeOnly(
            "org.junit.jupiter:junit-jupiter-engine:${project.ext['junit-jupiter.version']}",
            "org.junit.platform:junit-platform-launcher:${project.ext['junit-platform.version']}",
            // Mit Tomcat 9 bleiben die Tests haengen
            'org.springframework.boot:spring-boot-starter-undertow')
            //"io.qameta.allure:allure-gradle:$allureVersion")

    plantuml(
            "net.sourceforge.plantuml:plantuml:$plantumlVersion",
            "org.apache.ant:ant-junit:$antJunitVersion")
}

allOpen {
    annotation('org.springframework.stereotype.Component')
}

noArg {
    annotation('org.springframework.boot.context.properties.ConfigurationProperties')
}

//noinspection GroovyUnusedAssignment
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

//https://github.com/boxheed/gradle-sweeney-plugin
sweeney {
    enforce type: 'gradle', expect: '[4.6,)'
    // FIXME Java 11 erst ab Gradle 4.7
    enforce type: 'jdk', expect: '[10,11)'
    //noinspection GroovyAssignabilityCheck
    validate()
}

sourceSets {
    main.kotlin.srcDirs += 'src/main/kotlin'
    //main.java.srcDirs += 'src/main/kotlin'
}

// https://kotlinlang.org/docs/reference/using-gradle.html
compileKotlin {
    kotlinOptions {
        jvmTarget = "$targetCompatibility"
        javaParameters = true
        verbose = true
        freeCompilerArgs = ['-Xjsr305=strict']
        // ggf. wegen Kotlin-Daemon: %TEMP%\kotlin-daemon.* und %LOCALAPPDATA%\kotlin\daemon
        // https://youtrack.jetbrains.com/issue/KT-18300
        //  $env:LOCALAPPDATA\kotlin\daemon
        //  $env:TEMP\kotlin-daemon.<ZEITSTEMPEL>
        //warningsAsErrors = true
    }
}

// https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-configuration-metadata.adoc#generating-your-own-metadata-by-using-the-annotation-processor
compileKotlin.dependsOn(processResources)

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "$targetCompatibility"
        verbose = true
        freeCompilerArgs = ['-Xjsr305=strict']
        //warningsAsErrors = true
    }
}

bootRun {
    jvmArgs += [
            //'-noverify',
            '-Dspring.profiles.active=dev',
            "-Djavax.net.ssl.trustStore=${System.getProperty('user.dir')}/src/main/resources/truststore.p12",
            '-Djavax.net.ssl.trustStorePassword=zimmermann'
    ]

    // Remote Debugger:   gradle bootRun --debug-jvm
    //jvmArgs '-verbose:class'
    //jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005'
}

// http://docs.spring.io/spring-boot/docs/current/reference/html/build-tool-plugins-gradle-plugin.html
bootJar {
}
bootJar.doLast {
    println ''
    println 'Aufruf der ausfuehrbaren JAR-Datei:'
    println "java -jar build/libs/$archiveName --spring.profiles.active=dev"
    println ''
}

test {
    useJUnitPlatform {
        includeEngines 'junit-jupiter'
        includeTags 'rest', 'multimediaRest', 'streamingRest' //, 'service'
        //excludeTags 'service'
    }
    filter {
        includeTestsMatching "$includeTests"
    }
    systemProperty '-Djavax.net.ssl.trustStore', './src/main/resources/truststore.p12'
    systemProperty '-Djavax.net.ssl.trustStorePassword', 'zimmermann'
}

// https://docs.gradle.org/current/userguide/jacoco_plugin.html
// FIXME Neue Bytecode version ab Java 11: http://openjdk.java.net/jeps/309
jacoco {
    toolVersion = "$jacocoVersion"
}

// https://github.com/allure-framework/allure-gradle
// https://github.com/allure-framework/allure-java
// FIXME Allure erfordert AspectJ 1.8, aber Java 10 funktioniert nur mit AspectJ 1.9
//allure {
//    version = "$allureVersion"
//    autoconfigure = true
//    aspectjweaver = true
//    aspectjVersion = "${project.ext['aspectj.version']}"
//
//    useJUnit5 {
//        version = "$allureJunit5Version"
//    }
//}

// Docker erfordert, dass bei Windows 10 Hyper-V aktiviert ist.
// Dann funktioniert aber der Emulator von Android Studio nicht mehr.
// http://bmuschko.com/blog/dockerized-spring-boot-app
task docker(type: Exec) {
    dependsOn assemble

    executable = 'docker'
    args = ['build', '-t', "$name", '.']
    // commandLine 'docker.exe', 'build', '-t', "$name", '.'
}

// http://stackoverflow.com/questions/34143530/sonar-maven-analysis-class-not-found#answer-34151150
sonarqube {
    //noinspection GroovyAssignabilityCheck
    properties {
        // property 'sonar.tests', 'src/test/kotlin'
        // property 'sonar.exclusions', 'src/test/resources/truststore.p12'
        property 'sonar.scm.disabled', true
        //property 'sonar.java.coveragePlugin', 'jacoco'
        // https://docs.sonarqube.org/display/PLUG/Code+Coverage+by+Unit+Tests+for+Java+Project
        //property 'sonar.jacoco.reportPaths', jacocoExtension.destinationFile
        //property 'sonar.junit.reportsPaths', testTask.reports.junitXml.destination
    }
}

// https://android.github.io/kotlin-guides/style.html
// https://kotlinlang.org/docs/reference/coding-conventions.html
// https://www.jetbrains.com/help/idea/code-style-kotlin.html
// https://github.com/android/kotlin-guides/issues/37
// https://github.com/shyiko/ktlint/issues/120
ktlint {
    ignoreFailures = false
    version = "$ktlintVersion"
    debug = true
    //verbose = true
    //android = false
    reporter = 'checkstyle'
}

detekt {
    //version = '...'
    profile('main') {
        config = "$projectDir/config/detekt.yml"
        output = "$buildDir/reports/detekt"
        // filters = '.*/config/.*'
    }
    idea {
        path = "${System.getenv('USERPROFILE')}/.IntelliJIdea$intellijVersion"
        //codeStyleScheme = "$projectDir/config/code-style.xml"
        inspectionsProfile = "$projectDir/.idea/inspectionProfiles/Project_Default.xml"
        report = "$buildDir/reports"
    }
}

kotlinter {
    ignoreFailures = false
    reporters = ['checkstyle', 'plain']
}

// https://github.com/jeremylong/DependencyCheck/blob/master/src/site/markdown/dependency-check-gradle/configuration.md
// https://github.com/jeremylong/DependencyCheck/issues/360
dependencyCheck {
    //noinspection GroovyAccessibility
    suppressionFile = "$projectDir/config/owasp.xml"
    data {
        directory = 'C:/Zimmermann/owasp-dependency-check'
        username = 'dc'
        password = 'p'
    }
    //noinspection GroovyAccessibility
    format = 'ALL'
}

// http://randomthoughtsonjavaprogramming.blogspot.de/2012/02/plantuml-and-netbeans.html
task plantuml {
    doLast {
        ant.taskdef(name: 'plantuml',
                    classname: 'net.sourceforge.plantuml.ant.PlantUmlTask',
                    classpath: configurations.plantuml.asPath)

        ant.mkdir(dir: "$buildDir/docs/images")
        ant.plantuml(output: "$buildDir/docs/images",
                     // graphvizDot: 'C:\\Zimmermann\\Graphviz\\bin\\dot.exe',
                     verbose: true) {
            fileset(dir: "$projectDir/src/main/kotlin") {
                include(name: '**/*.puml')
            }
        }

        // PNG-Bilder kopieren fuer PDF-Generierung bei AsciiDoctor
        ant.mkdir(dir: "$projectDir/src/main/images")
        ant.copy(todir: "$projectDir/src/main/images") {
            fileset(dir: "$buildDir/docs/images") {
                include(name: '*.png')
            }
        }

        // Font Icons fuer AsciiDoctor kopieren
        // ant.mkdir(dir: "$buildDir/docs/icons")
        // ant.copy(todir: "$buildDir/docs/icons") {
        //     fileset(dir: "$projectDir/src/main/resources/docs/icons") {
        //         include(name: '*')
        //     }
        // }
    }
}

dokka {
    includes = ['Module.md']
    jdkVersion = 9
    // https://kotlinlang.org/api/latest/jvm/stdlib/package-list
    // http://docs.oracle.com/javase/9/docs/api/package-list
    // FIXME https://github.com/Kotlin/dokka/issues/188
    noStdlibLink = true
    //impliedPlatforms = ["JVM"]
    //skipEmptyPackages = false
}
dokka.dependsOn plantuml

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = "javadoc"
    outputDirectory = "$buildDir/dokkaJavadoc"
}

//task dependencyGraphPng(type: Exec) {
//    executable = 'dot'
//    args = ["$buildDir\\dependency-graph.dot", '-Tpng', '-o', "$buildDir\\dependency-graph.png"]
//}
//dependencyGraphPng.dependsOn generateDependencyGraph

// https://www.mynethome.de/2016/11/16/asciidoctor-gradle-separate-tasks-for-pdf-and-html-output
asciidoctorj {
    version = "$asciidoctorjVersion"
}
asciidoctor {
    sourceDir 'config/docs'
    outputDir "${buildDir}/docs/asciidoc"
    backends = ['html5']
    // backends = ['html5', 'pdf']
    logDocuments true
    //noinspection GroovyAssignabilityCheck
    attributes 'source-higlighter': 'coderay',
               'coderay-linenums-mode': 'table',
               toc: 'left',
               // icon: 'font',
               linkattrs: true,
               encoding: 'utf-8'
    // fuer PDF (noch im Alpha-Stadium!): imagesdir relativ zu sourceDir.
    // Dann funktioniert aber die Referenzierung der Bilder in HTML nicht mehr :-(
    // https://github.com/asciidoctor/asciidoctor-pdf/issues/271
    // https://github.com/asciidoctor/asciidoctor-epub3/issues/22
    // attributes imagesdir: "../../../build/docs/images"

    doLast {
        println 'Das Entwicklerhandbuch ist in build/docs/asciidoc/html5/entwicklerhandbuch.html'
    }
}
asciidoctor.dependsOn plantuml

// http://mrhaki.blogspot.de/2016/05/grails-goodness-change-version-for.html
// http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto-customize-dependency-versions
task dependencyManagementProperties {
    doLast {
        // Properties sortieren und auf der Konsole ausgeben
        dependencyManagement.importedProperties
                .toSorted()
                .each { property -> println property }
    }
}

// Aufruf:   gradlew cleanIdea idea
// https://docs.gradle.org/current/dsl/org.gradle.plugins.ide.idea.model.IdeaModule.html
idea {
    module {
        // downloadSources = true
        downloadJavadoc = true
    }
}
